@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>OneMitigation | Login</title>

    <!-- Google Font: Source Sans Pro -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="~/plugins/fontawesome-free/css/all.min.css">
    <!-- icheck bootstrap -->
    <link rel="stylesheet" href="~/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="~/dist/css/adminlte.min.css" asp-append-version="true">
    <style>
        .loader {
            display: block;
            position: relative;
            height: 12px;
            width: 80%;
            border: 1px solid #fff;
            border-radius: 10px;
            overflow: hidden;
        }

            .loader:after {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                height: 100%;
                width: 0;
                background: #007bff;
                animation: 2s prog ease-in infinite;
            }

        @@keyframes prog {
            to {
                width: 100%;
            }
        }
    </style>
</head>


<body class="hold-transition login-page" translate="no">
    <div class="login-box" id="app">
        <!-- /.login-logo -->
        <div class="card card-outline card-primary">
            <div class="card-header text-center">
                <a href="#" class="h1"><b>One</b>Mitigation</a>
            </div>
            <div class="card-body">
                <p class="login-box-msg">{{ getTexLabel('sys_forgot_ms') }}</p>
                <label style="color:red" v-if="error">{{ getTexLabel(errorMessage) }}</label>
                <label style="color:green" v-if="ok">{{ getTexLabel(errorMessage) }}</label>
                                    
                    <div class="input-group mb-3" v-if="!ok">
                    <input type="email" class="form-control" v-on:keyup.enter="ResetPass" v-model="userEmail" v-bind:placeholder="getTexLabel('sys_user')">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-envelope"></span>
                            </div>
                        </div>
                    </div>

                <div class="row" v-if="!ok">
                        <div class="col-12">
                        <span v-if="procesando" class="loader"></span>
                        <button v-if="!procesando" type="button" class="btn btn-primary btn-block" v-on:click="ResetPass" style="margin-top: 10px">{{ getTexLabel('sys_request_new_pass') }}</button>
                        </div>
                    </div>
                <p class="mt-3 mb-1">
                    <a v-if="!procesando" href="@Url.Action("Login","Account")">
                        <p style="padding-top: 10px;" class="login-box-msg">{{ getTexLabel('sys_btn_login') }}</p>
                    </a>
                </p>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
    <!-- /.login-box -->
    <!-- jQuery -->
    <script src="~/plugins/jquery/jquery.min.js"></script>
    <!-- Bootstrap 4 -->
    <script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- AdminLTE App -->
    <script src="~/dist/js/adminlte.min.js"></script>
    <script src="~/vue.js"></script>

    <script src="~/axios.min.js"></script>

    <script>

        Vue.config.productionTip = false;


        var app = new Vue({
            el: '#app',
            data: {
                languages: [],
                labels: [],
                userLang: '',
                userEmail: '',
                errorMessage: '',
                error: false,
                ok: false,
                procesando: false
            },
            computed: {

            },
            methods: {
                getTexLabel: function (label) {

                    if (this.labels.length == 0)
                        return label;

                    let text = this.labels.filter(_ => _.code == label);

                    if (text.length > 0)
                        return text[0].text_value;
                    else
                        return label;

                },
                GetLanguages: function () {

                    let self = this;

                    self.languages = [];

                    axios.get('@Url.Action("Languages", "Home")', {})
                        .then(function (response) {
                            self.languages = response.data.lista;

                            let codeLang = navigator.language || navigator.userLanguage;
                            if (codeLang == 'en' || codeLang == 'es')
                                self.userLang = self.languages.filter(_ => _.code == codeLang)[0].id;
                            else
                                self.userLang = self.languages[0].id;

                            self.GetLabels();

                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
                GetLabels: function () {

                    let self = this;

                    if (self.labels.length > 0) {
                        return;
                    }

                    self.labels = [];

                    axios.get('@Url.Action("Labels", "Home")?languageId=' + self.userLang + '&table=sys', {})
                        .then(function (response) {

                            self.labels = response.data.lista;

                            localStorage.clear();

                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },

                ResetPass: function () {

                    let self = this;

                    self.errorMessage = '';

                    self.procesando = true;

                    self.error = false;
                    self.ok = false;

                    axios.post('@Url.Action("ResetPass", "Account")', {
                        email : self.userEmail,
                        language: self.userLang
                    })
                        .then(function (response) {
                            self.procesando = false;
                            self.errorMessage = response.data.message;
                            self.error = response.data.error;
                            self.ok = !response.data.error;

                            if(self.ok){
                                setTimeout(function() {

                                    let url_acction = '@Url.Action("ResetPassword","Account")?email=' + self.userEmail;
                                    location.href = url_acction;
                                }, 2900);
                            }
                            else{
                                self.procesando = false;
                            }
                        })
                        .catch(function (error) {
                            self.procesando = false;
                            console.log(error);
                        });
                },
            },
            mounted: function () {

                let self = this;
                localStorage.clear();
                self.GetLanguages();
                setInterval(function () {
                    self.GetLabels();
                }, 3000);
            }
        });
    </script>

</body>
</html>
